# -*- mode: ruby -*-
# vi: set ft=ruby :

# The MIT License (MIT)
#
# Copyright (c) 2015 Keith Davidson
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.synced_folder "{{ project_source_directory }}", "/project_repo"


  # List of Hashes with node details
  nodes = [
  {% for node in vagrant_nodes %}
    {:groups => ['{{ node.groups | join(",") }}'], :name => :{{ node.name }}, :ip => '{{ node.ip }}' {% if node.http is defined %} ,:http => {{node.http}} {% endif %} {% if node.ssl is defined %},:ssl => {{node.ssl}}{% endif %} },
  {% endfor %}
  ]


  # Create group Hash for Ansible

  groups = {"all_groups:children" => []}

  nodes.each do |node|
    if node.has_key?(:groups) then
      node[:groups].each do |group|
        if groups.has_key?(group) then
          groups[group] << node[:name].to_s
        else
          groups[group] = [node[:name].to_s]
          groups["all_groups:children"] << group
        end
      end
    end
  end

  # Define Nodes

  nodes.each do |node|
    config.vm.define node[:name] do |cfg|

      # required parameters
      cfg.vm.hostname = node[:name].to_s
      cfg.vm.network :private_network, ip: node[:ip]

      #optional parameters
      cfg.vm.network "forwarded_port", guest: 80, host: node[:http] if node.has_key?(:http_port)
      cfg.vm.network "forwarded_port", guest: 443, host: node[:ssl] if node.has_key?(:ssl_port)

      cfg.vm.provision :hosts do |provisioner|
        provisioner.autoconfigure = true
        provisioner.add_host node[:ip], [cfg.vm.hostname, cfg.vm.hostname+".dev.local" ]
      end

      cfg.vm.provision "ansible" do |ansible|
        ansible.playbook = "allservers.yml"
        ansible.groups = groups if node.equal? nodes.last
      end
    end
  end

end
